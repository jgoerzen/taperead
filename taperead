#!/bin/bash

# Script to read all files from a tape
# Copyright (C) 2018 John Goerzen <jgoerzen@complete.org>
#
#     This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -e

if [ -z "$TAPE" ]; then
    echo "Need to set TAPE, perhaps to /dev/nst0?"
    exit 5
fi

# Might want to set DDOPTS to conv=noerror,sync if there are errors during
# read.

FILENO="${FILENO:=1}"
BLOCKSIZE="${BLOCKSIZE:=$(( 32 * 1024))}"
echo "Using read blocksize: $BLOCKSIZE"

EMPTIES=0
ERRORLIST=""
while [ "$EMPTIES" -lt 1 ] ; do
    FILENAME="`printf "file-%03d.bin" "$FILENO"`"
    if [ -e "$FILENAME" ]; then
        echo "Error: $FILENAME exists"
        exit 5
    fi
    LOGNAME="`printf "file-%03d.log" "$FILENO"`"
    MTINFO="`printf "file-%03d.mt" "$FILENO"`"
    echo " ******** Writing $FILENAME..."
    date
    if grep -q 'File number=-' "$MTINFO"; then
	echo "At file -1; assuming drive not ready.  Sleeping 10 seconds..."
	sleep 10
        mt -f "$TAPE" status > "$MTINFO"
    fi

    CSUM="`dd "if=$TAPE" "bs=$BLOCKSIZE" $DDOPTS 2> >(tee "$LOGNAME" >&2) | mbuffer -m 50M -s "$BLOCKSIZE" | tee "$FILENAME" | sha256sum | awk '{ print $1 }'`" || true
    RETCODE="$?"
    if [ "$RETCODE" != "0" ]; then
        ERRORLIST="$ERRORLIST $FILENAME"
    fi
    
    if [ ! -s "$FILENAME" ]; then
        echo "$FILENAME was 0-byte; removing."
        EMPTIES=$(($EMPTIES + 1))
        rm "$FILENAME"
    else
        echo "$CSUM  $FILENAME" >> sums
    fi
    FILENO=$(($FILENO + 1))
    date
done

sync
echo "Found end of tape."
if [ -z "$ERRORLIST" ]; then
    echo "No errors reported by dd."
else
    echo " >>> IMPORTANT: dd reported errors in: $ERRORLIST"
fi
echo "Verifying checksums..."
sha256sum -c sums
